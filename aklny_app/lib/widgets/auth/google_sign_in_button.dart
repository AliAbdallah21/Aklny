// lib/widgets/google_sign_in_button.dart
import 'package:flutter/material.dart';
import 'package:google_sign_in/google_sign_in.dart';
import '../../api_service/auth_api_service.dart'; // Import your AuthApiService
import '../../models/user_model.dart'; // Import your User model

class GoogleSignInButton extends StatefulWidget {
  final Function(String token, User user)? onSignInSuccess;
  final Function(String error)? onSignInFailure;

  const GoogleSignInButton({
    Key? key,
    this.onSignInSuccess,
    this.onSignInFailure,
  }) : super(key: key);

  @override
  State<GoogleSignInButton> createState() => _GoogleSignInButtonState();
}

class _GoogleSignInButtonState extends State<GoogleSignInButton> {
  // IMPORTANT: This is the Web Application Client ID generated by Firebase
  // when you added your Android app to Firebase. This is used as the 'audience'
  // for the ID token, ensuring it's valid for your backend server.
  // This MUST match the GOOGLE_CLIENT_ID_WEB in your backend's .env file.
  static const String _webClientId =
      '456570061071-lj9bt0k377tem758v4i5bfn6p326t8b8.apps.googleusercontent.com'; // <--- CONFIRMED AND CORRECT

  final GoogleSignIn _googleSignIn = GoogleSignIn(
    // Explicitly request 'openid', 'email', and 'profile' scopes.
    // 'openid' is crucial for OpenID Connect flows which issue ID tokens.
    // 'profile' ensures the user's name and profile picture are included.
    scopes: <String>['openid', 'email', 'profile'],
    // Provide the Web Application Client ID here.
    // On Android, this is used as the 'serverClientId' to request an ID token
    // that is valid for your backend server.
    serverClientId: _webClientId, // <--- Using the CONFIRMED Web Client ID
  );
  final AuthApiService _authApiService = AuthApiService();
  bool _isLoading = false;

  Future<void> _handleGoogleSignIn() async {
    setState(() {
      _isLoading = true;
    });

    try {
      print('Attempting Google Sign-In...');
      final GoogleSignInAccount? googleUser = await _googleSignIn.signIn();

      if (googleUser == null) {
        print(
          'Google Sign-In cancelled by user or failed to get Google user account.',
        );
        widget.onSignInFailure?.call('Google Sign-In cancelled.');
        return;
      }

      print('Successfully got GoogleSignInAccount: ${googleUser.email}');
      final GoogleSignInAuthentication googleAuth =
          await googleUser.authentication;

      print('Successfully got GoogleSignInAuthentication.');
      final String? idToken = googleAuth.idToken;
      final String? accessToken =
          googleAuth.accessToken; // For debugging, see if access token exists

      // --- CRITICAL DEBUGGING STEP: PRINT THE FULL ID TOKEN ---
      if (idToken != null) {
        print('--- FULL ID TOKEN ---');
        print(idToken); // <--- THIS WILL PRINT THE ACTUAL TOKEN
        print('--- END FULL ID TOKEN ---');
      }
      // --- END CRITICAL DEBUGGING STEP ---

      print('ID Token: ${idToken != null ? "Received" : "NULL"}');
      print('Access Token: ${accessToken != null ? "Received" : "NULL"}');

      if (idToken != null) {
        print('Sending ID Token to backend for verification...');
        // Send the ID token to your backend for verification and authentication
        final Map<String, dynamic> authResult = await _authApiService
            .authenticateWithGoogle(idToken);

        print(
          'Backend authentication successful. User: ${authResult['user'].email}',
        );
        widget.onSignInSuccess?.call(
          authResult['token'],
          authResult['user'],
        ); // Callback for successful sign-in
      } else {
        print(
          'Error: Google ID Token is NULL after authentication. This often means the Web Application OAuth Client ID is not correctly configured or linked to your project/app, or the required scopes are missing.',
        );
        widget.onSignInFailure?.call(
          'Failed to get Google ID Token. Please ensure your Google Cloud project is configured correctly (especially the Web Application Client ID and scopes).',
        );
      }
    } catch (e) {
      print('Google Sign-In error caught: ${e.toString()}');
      widget.onSignInFailure?.call('Google Sign-In error: ${e.toString()}');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return ElevatedButton.icon(
      onPressed: _isLoading
          ? null
          : _handleGoogleSignIn, // Disable button while loading
      icon: _isLoading
          ? const SizedBox(
              width: 20,
              height: 20,
              child: CircularProgressIndicator(
                strokeWidth: 2,
                valueColor: AlwaysStoppedAnimation<Color>(Colors.grey),
              ),
            )
          : Image.asset(
              'assets/google_logo.png',
              height: 24.0,
            ), // Assuming you have a Google logo asset
      label: Text(_isLoading ? 'Signing in...' : 'Sign in with Google'),
      style: ElevatedButton.styleFrom(
        foregroundColor: Colors.black87,
        backgroundColor: Colors.white,
        minimumSize: const Size(
          double.infinity,
          50,
        ), // Full width, fixed height
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(30), // Rounded corners
          side: const BorderSide(color: Colors.grey), // Light grey border
        ),
        elevation: 3, // Subtle shadow
        textStyle: const TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
      ),
    );
  }
}
